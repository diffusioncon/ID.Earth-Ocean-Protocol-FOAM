echo "---> Installing application source ..."

mv /tmp/src/* ./

# If NODE_ENV is not set by the user, then NODE_ENV is determined by whether
# the container is run in development mode.
if [ -z "$NODE_ENV" ]; then
  export NODE_ENV=development
else
  export NODE_ENV=production
fi


if [ "$NODE_ENV" != "production" ]; then

	echo "---> Building for development use"
	npm install

  ./bin/server/dev.sh

else

	echo "---> Building for production use"

  # use NODE_ENV development to install the devDependencies to correctly build the site
  NODE_ENV=development npm install

  echo "---> Pruning the development dependencies"
	npm prune

  # Clear the npm's cache and tmp directories only if they are not a docker volumes
	NPM_CACHE=$(npm config get cache)
	if ! mountpoint $NPM_CACHE; then
		echo "---> Cleaning the npm cache $NPM_CACHE"
		#As of npm@5 even the 'npm cache clean --force' does not fully remove the cache directory
		rm $NPM_CACHE* -rf
	fi
	NPM_TMP=$(npm config get tmp)
	if ! mountpoint $NPM_TMP; then
		echo "---> Cleaning the $NPM_TMP/npm-*"
		rm -rf $NPM_TMP/npm-*
	fi
fi

# Fix source directory permissions
fix-permissions ./
